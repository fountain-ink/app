create table "public"."banlist" (
    "address" text not null,
    "created_at" timestamp with time zone not null default now(),
    "added_by" text,
    "reason" text
);


alter table "public"."banlist" enable row level security;

create table "public"."blogs" (
    "address" text not null,
    "title" text,
    "about" text,
    "metadata" jsonb not null default jsonb_build_object('showAuthor', true, 'showTags', true, 'showTitle', true),
    "icon" text,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone,
    "owner" text not null,
    "handle" text,
    "theme" jsonb,
    "feed" text,
    "mail_list_id" bigint,
    "slug" text
);


alter table "public"."blogs" enable row level security;

create table "public"."curated" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "slug" text,
    "added_by" text
);


alter table "public"."curated" enable row level security;

create table "public"."drafts" (
    "id" bigint generated by default as identity not null,
    "createdAt" timestamp with time zone not null default now(),
    "author" text,
    "contributors" text[],
    "contentJson" jsonb,
    "contentHtml" text default '<> </>'::text,
    "documentId" text not null default gen_random_uuid(),
    "updatedAt" timestamp with time zone default now(),
    "yDoc" bytea,
    "title" text not null default ''::text,
    "subtitle" text default ''::text,
    "coverUrl" text,
    "contentMarkdown" text,
    "tags" text[] default '{}'::text[],
    "published_id" text
);


alter table "public"."drafts" enable row level security;

create table "public"."feedback" (
    "createdAt" timestamp with time zone not null default timezone('utc'::text, now()),
    "type" text not null,
    "text" text not null,
    "screenshot" text,
    "status" text default 'new'::text,
    "resolvedAt" timestamp with time zone,
    "author" text,
    "id" bigint generated by default as identity not null
);


alter table "public"."feedback" enable row level security;

create table "public"."posts" (
    "id" text not null,
    "created_at" timestamp with time zone not null default now(),
    "lens_slug" text,
    "slug" text,
    "author" text,
    "handle" text
);


alter table "public"."posts" enable row level security;

create table "public"."users" (
    "createdAt" timestamp with time zone not null default now(),
    "handle" text,
    "owner" text,
    "name" text,
    "address" text not null,
    "isAnonymous" boolean not null default true,
    "updatedAt" timestamp with time zone not null default now(),
    "metadata" jsonb default '{}'::jsonb,
    "email" text,
    "settings" jsonb not null default '{}'::jsonb
);


alter table "public"."users" enable row level security;

CREATE UNIQUE INDEX banlist_pkey ON public.banlist USING btree (address);

CREATE UNIQUE INDEX blogs_address_key ON public.blogs USING btree (address);

CREATE INDEX blogs_metadata_idx ON public.blogs USING gin (metadata);

CREATE INDEX blogs_owner_idx ON public.blogs USING btree (owner);

CREATE UNIQUE INDEX blogs_pkey ON public.blogs USING btree (address);

CREATE UNIQUE INDEX drafts_documentid_key ON public.drafts USING btree ("documentId");

CREATE UNIQUE INDEX drafts_pkey ON public.drafts USING btree (id);

CREATE UNIQUE INDEX feed_pkey ON public.curated USING btree (id);

CREATE UNIQUE INDEX feedback_id_key ON public.feedback USING btree (id);

CREATE UNIQUE INDEX feedback_pkey ON public.feedback USING btree (id);

CREATE UNIQUE INDEX posts_lens_slug_key ON public.posts USING btree (lens_slug);

CREATE UNIQUE INDEX posts_pkey ON public.posts USING btree (id);

CREATE UNIQUE INDEX posts_slug_key ON public.posts USING btree (slug);

CREATE UNIQUE INDEX users_handle_key ON public.users USING btree (handle);

CREATE UNIQUE INDEX users_pkey ON public.users USING btree (address);

CREATE UNIQUE INDEX "users_profileId_key" ON public.users USING btree (address);

alter table "public"."banlist" add constraint "banlist_pkey" PRIMARY KEY using index "banlist_pkey";

alter table "public"."blogs" add constraint "blogs_pkey" PRIMARY KEY using index "blogs_pkey";

alter table "public"."curated" add constraint "feed_pkey" PRIMARY KEY using index "feed_pkey";

alter table "public"."drafts" add constraint "drafts_pkey" PRIMARY KEY using index "drafts_pkey";

alter table "public"."feedback" add constraint "feedback_pkey" PRIMARY KEY using index "feedback_pkey";

alter table "public"."posts" add constraint "posts_pkey" PRIMARY KEY using index "posts_pkey";

alter table "public"."users" add constraint "users_pkey" PRIMARY KEY using index "users_pkey";

alter table "public"."blogs" add constraint "blogs_address_key" UNIQUE using index "blogs_address_key";

alter table "public"."blogs" add constraint "blogs_owner_fkey" FOREIGN KEY (owner) REFERENCES users(address) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."blogs" validate constraint "blogs_owner_fkey";

alter table "public"."drafts" add constraint "drafts_documentid_key" UNIQUE using index "drafts_documentid_key";

alter table "public"."feedback" add constraint "feedback_id_key" UNIQUE using index "feedback_id_key";

alter table "public"."feedback" add constraint "feedback_status_check" CHECK ((status = ANY (ARRAY['new'::text, 'in_progress'::text, 'completed'::text, 'dismissed'::text]))) not valid;

alter table "public"."feedback" validate constraint "feedback_status_check";

alter table "public"."feedback" add constraint "feedback_type_check" CHECK ((type = ANY (ARRAY['bug'::text, 'feature'::text, 'other'::text]))) not valid;

alter table "public"."feedback" validate constraint "feedback_type_check";

alter table "public"."posts" add constraint "posts_lens_slug_key" UNIQUE using index "posts_lens_slug_key";

alter table "public"."posts" add constraint "posts_slug_key" UNIQUE using index "posts_slug_key";

alter table "public"."users" add constraint "users_handle_key" UNIQUE using index "users_handle_key";

alter table "public"."users" add constraint "users_profileId_key" UNIQUE using index "users_profileId_key";

grant delete on table "public"."banlist" to "anon";

grant insert on table "public"."banlist" to "anon";

grant references on table "public"."banlist" to "anon";

grant select on table "public"."banlist" to "anon";

grant trigger on table "public"."banlist" to "anon";

grant truncate on table "public"."banlist" to "anon";

grant update on table "public"."banlist" to "anon";

grant delete on table "public"."banlist" to "authenticated";

grant insert on table "public"."banlist" to "authenticated";

grant references on table "public"."banlist" to "authenticated";

grant select on table "public"."banlist" to "authenticated";

grant trigger on table "public"."banlist" to "authenticated";

grant truncate on table "public"."banlist" to "authenticated";

grant update on table "public"."banlist" to "authenticated";

grant delete on table "public"."banlist" to "postgres";

grant insert on table "public"."banlist" to "postgres";

grant references on table "public"."banlist" to "postgres";

grant select on table "public"."banlist" to "postgres";

grant trigger on table "public"."banlist" to "postgres";

grant truncate on table "public"."banlist" to "postgres";

grant update on table "public"."banlist" to "postgres";

grant delete on table "public"."banlist" to "service_role";

grant insert on table "public"."banlist" to "service_role";

grant references on table "public"."banlist" to "service_role";

grant select on table "public"."banlist" to "service_role";

grant trigger on table "public"."banlist" to "service_role";

grant truncate on table "public"."banlist" to "service_role";

grant update on table "public"."banlist" to "service_role";

grant delete on table "public"."blogs" to "anon";

grant insert on table "public"."blogs" to "anon";

grant references on table "public"."blogs" to "anon";

grant select on table "public"."blogs" to "anon";

grant trigger on table "public"."blogs" to "anon";

grant truncate on table "public"."blogs" to "anon";

grant update on table "public"."blogs" to "anon";

grant delete on table "public"."blogs" to "authenticated";

grant insert on table "public"."blogs" to "authenticated";

grant references on table "public"."blogs" to "authenticated";

grant select on table "public"."blogs" to "authenticated";

grant trigger on table "public"."blogs" to "authenticated";

grant truncate on table "public"."blogs" to "authenticated";

grant update on table "public"."blogs" to "authenticated";

grant delete on table "public"."blogs" to "service_role";

grant insert on table "public"."blogs" to "service_role";

grant references on table "public"."blogs" to "service_role";

grant select on table "public"."blogs" to "service_role";

grant trigger on table "public"."blogs" to "service_role";

grant truncate on table "public"."blogs" to "service_role";

grant update on table "public"."blogs" to "service_role";

grant delete on table "public"."curated" to "anon";

grant insert on table "public"."curated" to "anon";

grant references on table "public"."curated" to "anon";

grant select on table "public"."curated" to "anon";

grant trigger on table "public"."curated" to "anon";

grant truncate on table "public"."curated" to "anon";

grant update on table "public"."curated" to "anon";

grant delete on table "public"."curated" to "authenticated";

grant insert on table "public"."curated" to "authenticated";

grant references on table "public"."curated" to "authenticated";

grant select on table "public"."curated" to "authenticated";

grant trigger on table "public"."curated" to "authenticated";

grant truncate on table "public"."curated" to "authenticated";

grant update on table "public"."curated" to "authenticated";

grant delete on table "public"."curated" to "postgres";

grant insert on table "public"."curated" to "postgres";

grant references on table "public"."curated" to "postgres";

grant select on table "public"."curated" to "postgres";

grant trigger on table "public"."curated" to "postgres";

grant truncate on table "public"."curated" to "postgres";

grant update on table "public"."curated" to "postgres";

grant delete on table "public"."curated" to "service_role";

grant insert on table "public"."curated" to "service_role";

grant references on table "public"."curated" to "service_role";

grant select on table "public"."curated" to "service_role";

grant trigger on table "public"."curated" to "service_role";

grant truncate on table "public"."curated" to "service_role";

grant update on table "public"."curated" to "service_role";

grant delete on table "public"."drafts" to "anon";

grant insert on table "public"."drafts" to "anon";

grant references on table "public"."drafts" to "anon";

grant select on table "public"."drafts" to "anon";

grant trigger on table "public"."drafts" to "anon";

grant truncate on table "public"."drafts" to "anon";

grant update on table "public"."drafts" to "anon";

grant delete on table "public"."drafts" to "authenticated";

grant insert on table "public"."drafts" to "authenticated";

grant references on table "public"."drafts" to "authenticated";

grant select on table "public"."drafts" to "authenticated";

grant trigger on table "public"."drafts" to "authenticated";

grant truncate on table "public"."drafts" to "authenticated";

grant update on table "public"."drafts" to "authenticated";

grant delete on table "public"."drafts" to "service_role";

grant insert on table "public"."drafts" to "service_role";

grant references on table "public"."drafts" to "service_role";

grant select on table "public"."drafts" to "service_role";

grant trigger on table "public"."drafts" to "service_role";

grant truncate on table "public"."drafts" to "service_role";

grant update on table "public"."drafts" to "service_role";

grant delete on table "public"."feedback" to "anon";

grant insert on table "public"."feedback" to "anon";

grant references on table "public"."feedback" to "anon";

grant select on table "public"."feedback" to "anon";

grant trigger on table "public"."feedback" to "anon";

grant truncate on table "public"."feedback" to "anon";

grant update on table "public"."feedback" to "anon";

grant delete on table "public"."feedback" to "authenticated";

grant insert on table "public"."feedback" to "authenticated";

grant references on table "public"."feedback" to "authenticated";

grant select on table "public"."feedback" to "authenticated";

grant trigger on table "public"."feedback" to "authenticated";

grant truncate on table "public"."feedback" to "authenticated";

grant update on table "public"."feedback" to "authenticated";

grant delete on table "public"."feedback" to "service_role";

grant insert on table "public"."feedback" to "service_role";

grant references on table "public"."feedback" to "service_role";

grant select on table "public"."feedback" to "service_role";

grant trigger on table "public"."feedback" to "service_role";

grant truncate on table "public"."feedback" to "service_role";

grant update on table "public"."feedback" to "service_role";

grant delete on table "public"."posts" to "anon";

grant insert on table "public"."posts" to "anon";

grant references on table "public"."posts" to "anon";

grant select on table "public"."posts" to "anon";

grant trigger on table "public"."posts" to "anon";

grant truncate on table "public"."posts" to "anon";

grant update on table "public"."posts" to "anon";

grant delete on table "public"."posts" to "authenticated";

grant insert on table "public"."posts" to "authenticated";

grant references on table "public"."posts" to "authenticated";

grant select on table "public"."posts" to "authenticated";

grant trigger on table "public"."posts" to "authenticated";

grant truncate on table "public"."posts" to "authenticated";

grant update on table "public"."posts" to "authenticated";

grant delete on table "public"."posts" to "postgres";

grant insert on table "public"."posts" to "postgres";

grant references on table "public"."posts" to "postgres";

grant select on table "public"."posts" to "postgres";

grant trigger on table "public"."posts" to "postgres";

grant truncate on table "public"."posts" to "postgres";

grant update on table "public"."posts" to "postgres";

grant delete on table "public"."posts" to "service_role";

grant insert on table "public"."posts" to "service_role";

grant references on table "public"."posts" to "service_role";

grant select on table "public"."posts" to "service_role";

grant trigger on table "public"."posts" to "service_role";

grant truncate on table "public"."posts" to "service_role";

grant update on table "public"."posts" to "service_role";

grant delete on table "public"."users" to "anon";

grant insert on table "public"."users" to "anon";

grant references on table "public"."users" to "anon";

grant select on table "public"."users" to "anon";

grant trigger on table "public"."users" to "anon";

grant truncate on table "public"."users" to "anon";

grant update on table "public"."users" to "anon";

grant delete on table "public"."users" to "authenticated";

grant insert on table "public"."users" to "authenticated";

grant references on table "public"."users" to "authenticated";

grant select on table "public"."users" to "authenticated";

grant trigger on table "public"."users" to "authenticated";

grant truncate on table "public"."users" to "authenticated";

grant update on table "public"."users" to "authenticated";

grant delete on table "public"."users" to "service_role";

grant insert on table "public"."users" to "service_role";

grant references on table "public"."users" to "service_role";

grant select on table "public"."users" to "service_role";

grant trigger on table "public"."users" to "service_role";

grant truncate on table "public"."users" to "service_role";

grant update on table "public"."users" to "service_role";

create policy "Allow users to delete their own blogs"
on "public"."blogs"
as permissive
for delete
to public
using ((owner = (auth.jwt() ->> 'sub'::text)));


create policy "Allow users to insert their own blogs"
on "public"."blogs"
as permissive
for insert
to public
with check ((owner = (auth.jwt() ->> 'sub'::text)));


create policy "Allow users to read any blog"
on "public"."blogs"
as permissive
for select
to public
using (true);


create policy "Allow users to update their own blogs"
on "public"."blogs"
as permissive
for update
to public
using ((owner = (auth.jwt() ->> 'sub'::text)));


create policy "Users can delete own drafts"
on "public"."drafts"
as permissive
for delete
to public
using (((auth.jwt() ->> 'sub'::text) = author));


create policy "Users can insert own drafts"
on "public"."drafts"
as permissive
for insert
to public
with check (((auth.jwt() ->> 'sub'::text) = author));


create policy "Users can read own drafts"
on "public"."drafts"
as permissive
for select
to public
using (((auth.jwt() ->> 'sub'::text) = author));


create policy "Users can update own drafts"
on "public"."drafts"
as permissive
for update
to public
using (((auth.jwt() ->> 'sub'::text) = author));


create policy "Users can insert feedback"
on "public"."feedback"
as permissive
for insert
to public
with check (((auth.jwt() ->> 'sub'::text) = author));


create policy "Users can read own feedback"
on "public"."feedback"
as permissive
for select
to public
using (((auth.jwt() ->> 'sub'::text) = author));


create policy "Users can update own feedback"
on "public"."feedback"
as permissive
for update
to public
using (((auth.jwt() ->> 'sub'::text) = author));


create policy "Users can read own profile"
on "public"."users"
as permissive
for select
to public
using (((auth.jwt() ->> 'sub'::text) = address));


create policy "Users can update own profile"
on "public"."users"
as permissive
for update
to public
using (((auth.jwt() ->> 'sub'::text) = address));



