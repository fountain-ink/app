-- Create contests table
CREATE TABLE IF NOT EXISTS public.contests (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    slug TEXT NOT NULL UNIQUE,
    name TEXT NOT NULL,
    theme TEXT,
    prize_pool JSONB DEFAULT '{"total": "0", "distribution": {}}'::jsonb,
    start_date TIMESTAMPTZ NOT NULL,
    end_date TIMESTAMPTZ NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    created_by TEXT NOT NULL,
    status TEXT DEFAULT 'upcoming' CHECK (status IN ('upcoming', 'active', 'ended'))
);

-- Create contest_winners table
CREATE TABLE IF NOT EXISTS public.contest_winners (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    contest_id UUID NOT NULL REFERENCES public.contests(id) ON DELETE CASCADE,
    post_slug TEXT NOT NULL,
    place INTEGER NOT NULL CHECK (place > 0),
    prize_amount TEXT,
    transaction_hash TEXT,
    added_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    added_by TEXT NOT NULL,
    UNIQUE(contest_id, post_slug),
    UNIQUE(contest_id, place)
);

-- Create indexes
CREATE INDEX idx_contests_slug ON public.contests(slug);
CREATE INDEX idx_contests_status ON public.contests(status);
CREATE INDEX idx_contest_winners_contest_id ON public.contest_winners(contest_id);

-- Enable RLS
ALTER TABLE public.contests ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.contest_winners ENABLE ROW LEVEL SECURITY;

-- Public read policies
CREATE POLICY "contests_public_read" ON public.contests
    FOR SELECT TO authenticated, anon
    USING (true);

CREATE POLICY "contest_winners_public_read" ON public.contest_winners
    FOR SELECT TO authenticated, anon
    USING (true);

-- Admin write policies
CREATE POLICY "contests_admin_all" ON public.contests
    FOR ALL TO authenticated
    USING (is_admin())
    WITH CHECK (is_admin());

CREATE POLICY "contest_winners_admin_all" ON public.contest_winners
    FOR ALL TO authenticated
    USING (is_admin())
    WITH CHECK (is_admin());

-- Function to update contest status based on dates
CREATE OR REPLACE FUNCTION update_contest_status()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.start_date > NOW() THEN
        NEW.status = 'upcoming';
    ELSIF NEW.end_date < NOW() THEN
        NEW.status = 'ended';
    ELSE
        NEW.status = 'active';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to auto-update status
CREATE TRIGGER update_contest_status_trigger
    BEFORE INSERT OR UPDATE OF start_date, end_date ON public.contests
    FOR EACH ROW
    EXECUTE FUNCTION update_contest_status();